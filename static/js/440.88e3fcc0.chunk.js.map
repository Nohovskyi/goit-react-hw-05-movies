{"version":3,"file":"static/js/440.88e3fcc0.chunk.js","mappings":"oOACA,EAA8B,iCAA9B,EAA8E,kC,SCEjEA,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAO5B,OACE,+BACE,kBAAMA,SARW,SAAAC,GACnBA,EAAEC,iBACFF,EAASC,EAAEE,cAAcC,KAAKC,OAC9BJ,EAAEE,cAAcC,KAAKC,MAAQ,EAC9B,EAIG,WACE,4BACE,kBACEC,aAAa,MACbC,KAAK,OACLH,KAAK,OACLI,YAAY,mBACZC,UAAWC,OAGf,mBAAQH,KAAK,SAASE,UAAWC,EAAjC,wBAMP,E,0BC3BD,EAA4B,0BCKtBC,GAAWC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IA+CtB,EA7Ce,WACb,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,EAASL,EAAaM,IAAI,aAEhCC,EAAAA,EAAAA,YAAU,WAAM,wCAId,gHAE2BC,EAAAA,EAAAA,IAAmBH,GAF9C,UAEUI,EAFV,OAKwB,KAFdC,EAAOD,EAASC,KAAKC,SAElBC,OALb,yCAMaC,MAAM,yCANnB,OAQIT,EAASM,GARb,kDAUII,QAAQC,IAAR,MAVJ,2DAJc,sBACTV,GADS,mCAiBdW,EACD,GAAE,CAACX,IAUJ,OACE,2BACE,iBAAKV,UAAWC,EAAhB,WACE,SAACX,EAAD,CAAaC,SAXM,SAAAK,GACvB,GAAc,KAAVA,EACF,OAAOsB,MAAM,sBAEfZ,EAAgB,CAAEgB,SAAU1B,IAC5Ba,EAAS,GACV,KAMK,SAAC,EAAAc,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,OACpB,SAACvB,EAAD,CAAUM,MAAOA,QAIxB,C,+LCjDKkB,EAAU,mCACVC,EAAW,+BACXC,EAAS,UAAMD,EAAN,wBACTE,EAAU,UAAMF,EAAN,iBACVG,EAAM,UAAMH,EAAN,WAIL,SAAeI,IAAtB,4CAAO,OAAP,oBAAO,yGAAkCC,EAAlC,+BAAyC,EACxC3B,EAAe,IAAI4B,gBAAgB,CACvCC,QAASR,EACTM,KAAMA,IAHH,kBAKEG,EAAAA,EAAAA,IAAA,UAAaP,EAAb,YAA0BvB,KAL5B,mEAQA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAkCuB,GAAlC,8EACC/B,EAAe,IAAI4B,gBAAgB,CACvCC,QAASR,EACTW,MAAOD,IAHJ,kBAKED,EAAAA,EAAAA,IAAA,UAAaN,EAAb,YAA2BxB,KAL7B,kEAQA,SAAeiC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,gFACCC,EAAWD,EACXlC,EAAe,IAAI4B,gBAAgB,CACvCC,QAASR,IAHN,kBAKES,EAAAA,EAAAA,IAAA,UAAaL,GAAb,OAAsBU,EAAtB,YAAkCnC,KALpC,kEAQA,SAAeoC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,gFACCC,EAAWD,EACXlC,EAAe,IAAI4B,gBAAgB,CACvCC,QAASR,IAHN,kBAKES,EAAAA,EAAAA,IAAA,UACFR,EADE,kBACgBa,EADhB,oBACoCnC,KANtC,kEAUA,SAAeqC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCH,GAAhC,gFACCC,EAAWD,EACXlC,EAAe,IAAI4B,gBAAgB,CACvCC,QAASR,IAHN,kBAKES,EAAAA,EAAAA,IAAA,UAAaR,EAAb,kBAA+Ba,EAA/B,oBAAmDnC,KALrD,kE","sources":["webpack://goit-react-hw-05-movies/./src/components/SearchMovie/SearchMovie.module.css?c852","components/SearchMovie/SearchMovie.jsx","webpack://goit-react-hw-05-movies/./src/Pages/Movies/Movies.module.css?d262","Pages/Movies/Movies.jsx","api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form__input\":\"SearchMovie_form__input__Et03i\",\"form__button\":\"SearchMovie_form__button__iEJIZ\"};","import PropTypes from 'prop-types';\nimport css from './SearchMovie.module.css';\n\nexport const SearchMovie = ({ onSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(e.currentTarget.name.value);\n    e.currentTarget.name.value = '';\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            autoComplete=\"off\"\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter movie name\"\n            className={css.form__input}\n          />\n        </label>\n        <button type=\"submit\" className={css.form__button}>\n          Search\n        </button>\n      </form>\n    </>\n  );\n};\n\nSearchMovie.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Movies_container__dUnRL\"};","import { fetchSearchedFilms } from '../../api';\nimport { SearchMovie } from '../../components/SearchMovie/SearchMovie';\nimport { Suspense, useEffect, useState, lazy } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport css from './Movies.module.css';\nconst HomeList = lazy(() => import('../../components/HomeList/HomeList'));\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [films, setFilms] = useState([]);\n\n  const search = searchParams.get('filmName');\n\n  useEffect(() => {\n    if (!search) {\n      return;\n    }\n    async function searchMovie() {\n      try {\n        const response = await fetchSearchedFilms(search);\n        const data = response.data.results;\n\n        if (data.length === 0) {\n          return alert('No matches please enter correct name');\n        }\n        setFilms(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    searchMovie();\n  }, [search]);\n\n  const handleFromSubmit = value => {\n    if (value === '') {\n      return alert('the field is empty');\n    }\n    setSearchParams({ filmName: value });\n    setFilms([]);\n  };\n\n  return (\n    <main>\n      <div className={css.container}>\n        <SearchMovie onSubmit={handleFromSubmit} />\n        <Suspense fallback={<Loader />} />\n        <HomeList films={films} />\n      </div>\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '9f3449ca8495a13b6d35e887839f0061';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TREND_URL = `${BASE_URL}/trending/movie/week`;\nconst SEARCH_URL = `${BASE_URL}/search/movie`;\nconst ID_URL = `${BASE_URL}/movie/`;\n\n\n\nexport async function fetchTrendingFilms(page = 1) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    page: page,\n  });\n  return axios.get(`${TREND_URL}?${searchParams}`);\n}\n\nexport async function fetchSearchedFilms(content) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    query: content,\n  });\n  return axios.get(`${SEARCH_URL}?${searchParams}`);\n}\n\nexport async function fetchFilmById(id) {\n  const movie_id = id;\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  return axios.get(`${ID_URL}${movie_id}?${searchParams}`);\n}\n\nexport async function fetchCreditsById(id) {\n  const movie_id = id;\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  return axios.get(\n    `${BASE_URL}/movie/${movie_id}/credits?${searchParams}`\n  );\n}\n\nexport async function fetchReviewsById(id) {\n  const movie_id = id;\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  return axios.get(`${BASE_URL}/movie/${movie_id}/reviews?${searchParams}`);\n}\n\n\n\n\n\n\n\n"],"names":["SearchMovie","onSubmit","e","preventDefault","currentTarget","name","value","autoComplete","type","placeholder","className","css","HomeList","lazy","useSearchParams","searchParams","setSearchParams","useState","films","setFilms","search","get","useEffect","fetchSearchedFilms","response","data","results","length","alert","console","log","searchMovie","filmName","Suspense","fallback","Loader","API_KEY","BASE_URL","TREND_URL","SEARCH_URL","ID_URL","fetchTrendingFilms","page","URLSearchParams","api_key","axios","content","query","fetchFilmById","id","movie_id","fetchCreditsById","fetchReviewsById"],"sourceRoot":""}